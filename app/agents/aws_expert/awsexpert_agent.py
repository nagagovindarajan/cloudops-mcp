"""Demonstration of Travel AI Conceirge using Agent Development Kit"""

import base64
from time import sleep
from google.adk.agents import BaseAgent, Agent, LoopAgent, SequentialAgent
from google.adk.artifacts import InMemoryArtifactService
import google.genai.types as types
from google.adk import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.agents.invocation_context import InvocationContext
from .callbacks import before_model, after_model, before_tool, after_tool, before_agent, after_agent
from .prompt import ROOT_AGENT_INSTR, GLOBAL_INSTRUCTION
from google.adk.tools.agent_tool import AgentTool
from google.adk.events import Event, EventActions
from google.adk.tools import FunctionTool
import google.adk.planners.built_in_planner
from typing import AsyncGenerator
from config import Config
from common_util import get_model_details_by_name
from common_util import execute_command
from .prompt import COMMAND_GENERATOR_AGENT_INSTR, COMMAND_EXECUTOR_AGENT_INSTR

class AwsExpertAgent:
    def __init__(self, app_name="aws_expert", user_id="test_user"):
        self.app_name = app_name
        self.user_id = user_id
        self.config = Config()
        
        # Set up models
        self.MODEL = get_model_details_by_name(self.config.get_model_base()).id
        self.MODEL_NEW = get_model_details_by_name(self.config.get_model_think()).id
        self.MODEL_LITE = get_model_details_by_name(self.config.get_model_lite()).id  
        self.MODEL_PRO = get_model_details_by_name(self.config.get_model_pro()).id
        
        # Setup services
        self.artifact_service = InMemoryArtifactService()
        self.session_service = InMemorySessionService()
        self.session = self.session_service.create_session(
            app_name=self.app_name,
            user_id=self.user_id,
        )
        self.session_id = self.session.id
        
        self.generate_content_config = types.GenerateContentConfig(
            temperature=0.2,  # More deterministic output
            max_output_tokens=1000
        )
        
        # Initialize agents
        self._setup_agents()
        
        # Create runner
        self.runner = Runner(
            app_name=self.app_name,
            agent=self.root_agent,
            artifact_service=self.artifact_service,
            session_service=self.session_service
        )
    
    def execute_aws_commands(self, commands : list[str]):
        """
        Execute the aws commands through aws cli.
        
        Args:
            commands (list[str]): The list of aws commands to execute.
        Returns:
            list[dict]: A list of dictionaries with command, output, and return code.
        """

        results = []
        path = "./data"
        for command in commands:
            return_code, command_output, cleaned_output = execute_command(command, path)
            results.append({
                "command": command,
                "command_output": cleaned_output,
                "code": return_code
            })

        print(f"Results: {results}")
        return results

    def _setup_agents(self):
   
        self.aws_command_generator_agent = Agent(
            model=self.MODEL,
            name="aws_command_generator_agent",
            description="This agent will generate the aws commands based on the user request.",
            instruction=COMMAND_GENERATOR_AGENT_INSTR,
            before_model_callback=before_model,
            after_model_callback=after_model,
            before_agent_callback=before_agent,
            after_agent_callback=after_agent,
            generate_content_config=self.generate_content_config,
            output_key="aws_commands"
        )

        self.aws_command_executor_agent = Agent(
            model=self.MODEL,
            name="aws_command_executor_agent",
            description="This agent will execute the aws commands generated by the aws_command_generator_agent.",
            instruction=COMMAND_EXECUTOR_AGENT_INSTR,
            tools=[self.execute_aws_commands],
            before_model_callback=before_model,
            after_model_callback=after_model,
            before_agent_callback=before_agent,
            after_agent_callback=after_agent,
            before_tool_callback=before_tool,
            after_tool_callback=after_tool,
            generate_content_config=self.generate_content_config,
        )

        self.task_manager_agent = SequentialAgent(
            name="task_manager_agent",
            description="This agent will manage the tasks and the agents.",
            sub_agents=[self.aws_command_generator_agent, self.aws_command_executor_agent]
        )

        self.root_agent = Agent(
            model=self.MODEL_NEW,
            name="root_agent",
            description="Root agent that will receive user request and decide the next action to perform.",
            global_instruction=GLOBAL_INSTRUCTION,
            instruction=ROOT_AGENT_INSTR,
            tools=[AgentTool(self.task_manager_agent)],
            before_model_callback=before_model,
            after_model_callback=after_model,
            before_agent_callback=before_agent,
            after_agent_callback=after_agent,
            before_tool_callback=before_tool,
            after_tool_callback=after_tool,
            generate_content_config=self.generate_content_config
        )
    
    def run(self, user_query):
        """Run the agent with the given query."""
        content = types.Content(role="user", parts=[types.Part(text=user_query)])
        events = list(
            self.runner.run(
                user_id=self.user_id, session_id=self.session_id, new_message=content
            )
        )
        
        last_event = events[-1]
        final_response = ""
        if last_event.content and hasattr(last_event.content, 'parts'):
            final_response = "".join(
                [part.text for part in last_event.content.parts if part.text]
            )
        else:
            final_response = "No response from the agent"
        
        return final_response
